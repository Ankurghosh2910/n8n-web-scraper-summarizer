{
  "name": "web-scraper/article-summarizer",
  "nodes": [
    {
      "parameters": {
        "url": "https://www.googleapis.com/customsearch/v1",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "api-key"
            },
            {
              "name": "cx",
              "value": "f38b07c77e32245ee"
            },
            {
              "name": "q",
              "value": "={{ $json.chatInput }}"
            },
            {
              "name": "num",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20,
        -340
      ],
      "id": "a61fd0a2-e14b-41c0-98d9-08262b59ff74",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        -340
      ],
      "id": "01694427-659a-4493-b8c5-3f337c8a4d2d",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"url\": \"{{ $json['link'] }}\",\n  \"title\": \"{{ $json['title'] }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        -340
      ],
      "id": "da27f526-2a74-4327-910c-1f7617e006be",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        240,
        -340
      ],
      "id": "cfe67f87-b4e3-4b18-b875-084986d6797b",
      "name": "Split Out"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.short_summary }}",
        "messages": {
          "messageValues": [
            {
              "message": "You are a concise research assistant. Summarize the following article content into 3–5 key bullet points, focusing on findings or claims about \"Learning Styles in High School Students\". "
            }
          ]
        },
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -120,
        -80
      ],
      "id": "2bed2f1b-5e8d-4ea2-8571-e9997c2cafdc",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -120,
        140
      ],
      "id": "e886d233-0809-4211-9ec9-d569f6701acc",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "twoN2wx5fNEaRZsN",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const MAX_CHARS = 800; // final summary length cap\nconst EXTRA_SENTENCES = 2; // number of top keyword sentences to add after first\n\n// Simple HTML-to-text (minimal)\nfunction stripHTML(html) {\n  return html\n    .replace(/<script[\\s\\S]*?<\\/script>/gi, '')\n    .replace(/<style[\\s\\S]*?<\\/style>/gi, '')\n    .replace(/<\\s*br\\s*\\/?>/gi, ' ')\n    .replace(/<\\/p>/gi, '. ')\n    .replace(/<[^>]+>/g, '')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Sentence splitter (naive)\nfunction splitSentences(text) {\n  const matches = text.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n  if (!matches) return [];\n  return matches.map(s => s.trim());\n}\n\n// Score by keyword overlap\nfunction scoreSentence(sentence, topic) {\n  if (!topic) return 0;\n  const topicWords = topic\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter(w => w.length > 2);\n  const s = sentence.toLowerCase();\n  let score = 0;\n  for (const tw of topicWords) {\n    if (s.includes(tw)) score += 1;\n  }\n  return score;\n}\n\nconst rawHtml = $json.data || '';\nconst topic = ($json.topic || '').toString();\n\nconst text = stripHTML(rawHtml);\nconst sentences = splitSentences(text);\n\nlet selected = [];\n\n// Always include first sentence if exists\nif (sentences.length > 0) {\n  selected.push({\n    sentence: sentences[0],\n    index: 0,\n    score: 0,\n    source: 'lead',\n  });\n}\n\n// Score remaining and pick top N\nconst candidates = sentences\n  .slice(1)\n  .map((s, idx) => ({\n    sentence: s,\n    index: idx + 1,\n    score: scoreSentence(s, topic),\n  }))\n  .filter(o => o.sentence.length > 20); // skip tiny ones\n\n// Sort by score descending, then original order\ncandidates.sort((a, b) => {\n  if (b.score !== a.score) return b.score - a.score;\n  return a.index - b.index;\n});\n\n// Take top EXTRA_SENTENCES\nconst picked = candidates.slice(0, EXTRA_SENTENCES);\npicked.forEach(p => selected.push(p));\n\n// Re-sort selected by original position to keep coherence\nselected.sort((a, b) => a.index - b.index);\n\n// Assemble summary string with char cap\nlet summary = '';\nfor (const item of selected) {\n  const addition = summary ? ' ' + item.sentence : item.sentence;\n  if ((summary + addition).length <= MAX_CHARS) {\n    summary = summary + (summary ? ' ' : '') + item.sentence;\n  } else {\n    // try to add truncated\n    const remaining = MAX_CHARS - summary.length - 1;\n    if (remaining > 30) {\n      summary = summary + ' ' + item.sentence.slice(0, remaining).trim() + '…';\n    }\n    break;\n  }\n}\n\n// Fallback if empty\nif (!summary) {\n  if (text.length <= MAX_CHARS) {\n    summary = text;\n  } else {\n    summary = text.slice(0, 200).trim() + '…';\n  }\n}\n\n// Return ultra-condensed summary\nreturn {\n  json: {\n    short_summary: summary,\n    topic_used: topic,\n    original_sentence_count: sentences.length,\n  },\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        -340
      ],
      "id": "93795ff8-1185-4e55-9347-65b68b022037",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -160,
        -340
      ],
      "id": "e74ea494-f636-4dcd-881e-57f2f4349ef4",
      "name": "When chat message received",
      "webhookId": "3758bc9a-d013-4645-943d-6f6b95d0e07b"
    },
    {
      "parameters": {
        "operation": "createFromText",
        "content": "={{ $json.op }}",
        "name": "={{ $('When chat message received').item.json.chatInput }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1rvtZ35NQKMctkqjy8VJzwyl6YDItP8Qa",
          "mode": "list",
          "cachedResultName": "n8n-article_summary",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1rvtZ35NQKMctkqjy8VJzwyl6YDItP8Qa"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        780,
        -80
      ],
      "id": "2e542bb0-d0c4-4edd-bcf7-4ff21bc69799",
      "name": "Create file from text",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "74YGa0mIh7Uflj7o",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        260,
        -80
      ],
      "id": "6875dcc5-3153-48f2-b61d-de77efc1760a",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c585983c-8c24-4895-b78f-7f7e51510ff8",
              "name": "op",
              "value": "={{ $json[\"text\"].join(\"\\n\\n\") }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        -80
      ],
      "id": "d45fc4f8-1803-4c86-907d-1c4c19fd8706",
      "name": "Edit Fields"
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Create file from text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f46f2335-9bd0-4840-a895-5436c36722ad",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bf6b0b764c0cdda84ac581a0e8c167bd4369e186ec70dd46eb323b51fe54896f"
  },
  "id": "eCvFhY9wrvi5ZeuW",
  "tags": []
}
